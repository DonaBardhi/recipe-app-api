version: "3.9"

services:
  #app is the name of our service, that is gonna run our docker fie
  app:
    #Its gonna build our Docker  file inside our current directory - (.) in context  
    build: 
      #Use the current directory from where weÃ¤re using our dockercompose from.
      context: .
      #This sets the DEV build argument for the app service to True during the build process
      args:
        - DEV=true 
    #Port mapping. This maps port 8000 in our local machine to port 8000 inside our Docker Container. This is how we can access the network when we want to connect to our server.
    ports:
      - "8000-8000"     
    #Mapping directories from our system to our container. We map the app directory in our project to /app in our container
    volumes:
      - ./app:/app
    image: app:django 
    container_name: my_container1
    #The command that is used to run the service
    command: >
      sh -c "python manage.py  wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment: 
      - DB_HOST=db
      - DB_NAME=devdb
      - DB_USER=devuser
      - DB_PASS=changeme
    depends_on:
      - db



  
  db:  #db service configuration
    image: postgres:13-alpine #Specifies the Docker image to be used for the "db" service, and it indicates the Postgres version as 13 with the Alpine Linux distribution as the base image. Alpine images are known for their small size.
    volumes:
      - dev-db-data:/var/lib/postgresql/data #Creates a Docker volume named "dev-db-data" and mounts it to the /var/lib/postgresql/data directory inside the Postgres container. This volume is used to persistently store the database data. This means that even if the container is stopped or removed, the data will be retained in the "dev-db-data" volume.
    environment: #Specifies environment variables for configuring the Postgres database within the container.
      - POSTGRES_DB=devdb #Sets the name of the default database to "devdb."
      - POSTGRES_USER=devuser #ets the username for connecting to the database to "devuser."
      - POSTGRES_PASSWORD=changeme


#In Docker, volumes provide a way to persistently store and manage data generated by Docker containers. They are used to handle the storage of data outside the container's filesystem, ensuring that data persists even if the container is stopped or removed. 
volumes:
  dev-db-data:  #Defines a named volume called "dev-db-data." This named volume is referenced in the service configuration (volumes section under "db") and is mounted to the Postgres container. Named volumes in Docker Compose help manage and persist data independently of containers.
